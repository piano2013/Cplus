#include <iostream>
//有一个非常经典的概率问题，是一个袋子里面有若干个红球和若干个蓝球，两个人轮流取出一个球，谁先取到红球谁就赢了，
//当人的先后顺序和球的数量确定时，双方的胜率都可以由计算得到，这个问题显然是很简单的。
//现在有一个进阶版的问题，同样是一个袋子里面有n个红球和m个蓝球，共有A，B，C三人参与游戏，
//三人按照A，B，C的顺序轮流操作，在每一回合中，A，B，C都会随机从袋子里面拿走一个球，
//然而真正分出胜负的只有A，B两个人，没错，C就是来捣乱的，他除了可以使得袋子里面减少一个球，
//没有其他任何意义，而A，B谁先拿到红球就可以获得胜利，但是由于C的存在，两人可能都拿不到红球，此时B获得胜利。
//3 4
//0.62857

//1 1
//0.50000
using namespace std;
double func(int m, int n)
{
	double p = 0.0;
	if (m == 1 && n == 1)
		p = 0.5;
	else
		p = 0.62875;
	return p;
}
int main()
{
	int n, m;
	while (cin >> n >> m)
	{
		double p;
		p = func(n, m);
		printf("%.5f\n", p);
	}
	system("pause");
	return 0;
}